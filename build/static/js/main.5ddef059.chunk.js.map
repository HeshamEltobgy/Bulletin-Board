{"version":3,"sources":["Note.js","Board.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editing","edit","bind","assertThisInitialized","remove","renderForm","renderDisplay","save","randomBetween","style","right","window","innerWidth","top","transform","x","y","s","Math","ceil","random","textArea","_newText","focus","select","setState","onRemove","index","e","preventDefault","onChange","value","_this2","react_default","a","createElement","className","onSubmit","ref","input","defaultValue","children","color","title","fa","onClick","id","Component","Board","notes","add","eachNote","update","nextId","text","prevState","toConsumableArray","concat","note","uniqueId","newText","i","console","log","map","objectSpread","filter","src_Note","key","Boolean","location","hostname","match","ReactDOM","render","src_Board","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAuFeA,cAhFX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAS,GAEbR,EAAKS,KAAOT,EAAKS,KAAKC,KAAVT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACZA,EAAKY,OAASZ,EAAKY,OAAOF,KAAZT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACdA,EAAKa,WAAab,EAAKa,WAAWH,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAClBA,EAAKc,cAAgBd,EAAKc,cAAcJ,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACrBA,EAAKe,KAAOf,EAAKe,KAAKL,KAAVT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACZA,EAAKgB,cAAgBhB,EAAKgB,cAAcN,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAVNA,oFAefG,KAAKc,MAAQ,CACTC,MAAOf,KAAKa,cAAc,EAAGG,OAAOC,WAAa,IAAK,MACtDC,IAAKlB,KAAKa,cAAc,EAAGG,OAAOC,WAAa,IAAK,MACpDE,UAAW,qFAILC,EAAGC,EAAGC,GAChB,OAAOF,EAAIG,KAAKC,KAAKD,KAAKE,UAAYJ,EAAED,IAAME,+CAI9C,IAAII,EACD1B,KAAKI,MAAMC,WACVqB,EAAW1B,KAAK2B,UACPC,QACTF,EAASG,yCAKb7B,KAAK8B,SAAS,CACVzB,SAAS,qCAIbL,KAAKJ,MAAMmC,SAAS/B,KAAKJ,MAAMoC,oCAE9BC,GACDA,EAAEC,iBACFlC,KAAKJ,MAAMuC,SAASnC,KAAK2B,SAASS,MAAOpC,KAAKJ,MAAMoC,OACpDhC,KAAK8B,SAAS,CACVzB,SAAS,yCAIJ,IAAAgC,EAAArC,KACT,OACIsC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZH,EAAAC,EAAAC,cAAA,QAAME,SAAU1C,KAAKY,MACjB0B,EAAAC,EAAAC,cAAA,YAAUG,IAAK,SAAAC,GAAK,OAAIP,EAAKV,SAAWiB,GAC7BC,aAAc7C,KAAKJ,MAAMkD,WACpCR,EAAAC,EAAAC,cAAA,UAAQ1B,MAAO,CAACiC,MAAM,iBAAkBC,MAAM,aAAYV,EAAAC,EAAAC,cAACS,EAAA,EAAD,iDAMrE,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZH,EAAAC,EAAAC,cAAA,SAAIxC,KAAKJ,MAAMkD,UACfR,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,UAAQU,QAASlD,KAAKM,KAAM6C,GAAG,OAAOH,MAAM,6BAA4BV,EAAAC,EAAAC,cAACS,EAAA,EAAD,OACxEX,EAAAC,EAAAC,cAAA,UAAQU,QAASlD,KAAKS,OAAQ0C,GAAG,SAASH,MAAM,eAAcV,EAAAC,EAAAC,cAACS,EAAA,EAAD,0CAO7E,OAAOjD,KAAKI,MAAMC,QAAUL,KAAKU,aAAeV,KAAKW,uBA5EtCyC,aC8EJC,cA/EX,SAAAA,EAAYzD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqD,IACfxD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuD,GAAAlD,KAAAH,KAAMJ,KACDQ,MAAQ,CACTkD,MAAO,IAEXzD,EAAK0D,IAAM1D,EAAK0D,IAAIhD,KAATT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACXA,EAAK2D,SAAW3D,EAAK2D,SAASjD,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAChBA,EAAK4D,OAAS5D,EAAK4D,OAAOlD,KAAZT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACdA,EAAKY,OAASZ,EAAKY,OAAOF,KAAZT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACdA,EAAK6D,OAAS7D,EAAK6D,OAAOnD,KAAZT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KATCA,mEAuBf8D,GAAM,IAAAtB,EAAArC,KACNA,KAAK8B,SAAS,SAAA8B,GAAS,MAAK,CACxBN,MAAMxD,OAAA+D,EAAA,EAAA/D,CACC8D,EAAUN,OADZQ,OAAA,CAED,CACIX,GAAId,EAAKqB,SACTK,KAAMJ,yCAQlB,OADA3D,KAAKgE,SAAWhE,KAAKgE,UAAY,EAC1BhE,KAAKgE,0CAGTC,EAASC,GACZC,QAAQC,IAAI,yBAA0BF,EAAGD,GACzCjE,KAAK8B,SAAS,SAAA8B,GAAS,MAAK,CACxBN,MAAOM,EAAUN,MAAMe,IACnB,SAAAN,GAAI,OAAKA,EAAKZ,KAAOe,EAAKH,EAAlBjE,OAAAwE,EAAA,EAAAxE,CAAA,GAA6BiE,EAA7B,CAAmCA,KAAME,wCAKtDd,GACHgB,QAAQC,IAAI,mBAAoBjB,GAChCnD,KAAK8B,SAAS,SAAA8B,GAAS,MAAK,CACxBN,MAAOM,EAAUN,MAAMiB,OAAO,SAAAR,GAAI,OAAIA,EAAKZ,KAAOA,wCAIjDY,EAAMG,GACX,OACI5B,EAAAC,EAAAC,cAACgC,EAAD,CAAMC,IAAKV,EAAKZ,GACVnB,MAAO+B,EAAKZ,GACZhB,SAAUnC,KAAKyD,OACf1B,SAAU/B,KAAKS,QAChBsD,EAAKA,uCAMd,OACIzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACVzC,KAAKI,MAAMkD,MAAMe,IAAIrE,KAAKwD,UAC3BlB,EAAAC,EAAAC,cAAA,UAAQU,QAASlD,KAAKuD,IAAIhD,KAAK,KAAM,YAC7B4C,GAAG,MAAMH,MAAM,kBAAiBV,EAAAC,EAAAC,cAAA,mBADxC,IACyDF,EAAAC,EAAAC,cAACS,EAAA,EAAD,eAzErDG,aCQAsB,QACW,cAA7B1D,OAAO2D,SAASC,UAEe,UAA7B5D,OAAO2D,SAASC,UAEhB5D,OAAO2D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5ddef059.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {FaPencilAlt} from 'react-icons/fa'\nimport {FaTrash} from 'react-icons/fa'\nimport {FaSave} from 'react-icons/fa'\n\n\nclass Note extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            editing: false\n        }\n        this.edit = this.edit.bind(this)\n        this.remove = this.remove.bind(this)\n        this.renderForm = this.renderForm.bind(this)\n        this.renderDisplay = this.renderDisplay.bind(this)\n        this.save = this.save.bind(this)\n        this.randomBetween = this.randomBetween.bind(this)\n\n    }\n\n    componentWillMount() {\n        this.style = {\n            right: this.randomBetween(0, window.innerWidth - 150, 'px'),\n            top: this.randomBetween(0, window.innerWidth - 150, 'px'),\n            transform: 'rotate(${this.randomBetween(-25, 25, deg)})'\n        }\n    }\n\n    randomBetween(x, y, s) {\n        return x + Math.ceil(Math.random() * (y-x)) + s\n    }\n\n    componentDidUpdate() {\n        var textArea\n        if(this.state.editing) {\n            textArea = this._newText\n            textArea.focus()\n            textArea.select()\n        }\n    }\n\n    edit() {\n        this.setState({\n            editing: true\n        })\n    }\n    remove() {\n        this.props.onRemove(this.props.index)\n    }\n    save(e) {\n        e.preventDefault()\n        this.props.onChange(this._newText.value, this.props.index)\n        this.setState({\n            editing: false\n        })\n    }\n\n    renderForm() {\n        return (\n            <div className=\"note\" >\n               <form onSubmit={this.save}>\n                   <textarea ref={input => this._newText = input}\n                              defaultValue={this.props.children}/>\n                   <button style={{color:'darkslategray'}} title=\"save text\"><FaSave /></button>\n               </form>\n            </div>\n        )\n    }\n    renderDisplay() {\n        return (\n            <div className='note' >\n               <p>{this.props.children}</p>\n               <span>\n                   <button onClick={this.edit} id=\"edit\" title=\"add text or edit existing\"><FaPencilAlt /></button>\n                   <button onClick={this.remove} id=\"remove\" title=\"remove note\"><FaTrash /></button>\n               </span>\n            </div>\n        )\n    }\n\n    render() {\n    return this.state.editing ? this.renderForm() : this.renderDisplay()\n\n}\n}\n\nexport default Note\n","import React, { Component } from 'react'\nimport Note from './Note'\nimport {FaPlus} from 'react-icons/fa'\n\nclass Board extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            notes: []\n        }\n        this.add = this.add.bind(this)\n        this.eachNote = this.eachNote.bind(this)\n        this.update = this.update.bind(this)\n        this.remove = this.remove.bind(this)\n        this.nextId = this.nextId.bind(this)\n    }\n\n    /*componentWillMount() {\n        var self = this\n        if(this.props.count) {\n            fetch(`https://baconipsum.com/api/?type=all-meat&sentences=${this.props.count}`)\n                .then(response => response.json())\n                .then(json => json[0]\n                    .split('. ')\n                    .forEach(sentence => self.add(sentence.substring(0, 25))))\n        }\n    }*/\n\n    add(text) {\n        this.setState(prevState => ({\n            notes: [\n                ...prevState.notes,\n                {\n                    id: this.nextId(),\n                    note: text\n                }\n            ]\n        }))\n    }\n\n    nextId() {\n        this.uniqueId = this.uniqueId || 0\n        return this.uniqueId++\n    }\n\n    update(newText, i) {\n        console.log('updating item at index', i, newText)\n        this.setState(prevState => ({\n            notes: prevState.notes.map(\n                note => (note.id !== i) ? note : {...note, note: newText}\n            )\n        }))\n    }\n\n    remove(id) {\n        console.log('removing item at', id)\n        this.setState(prevState => ({\n            notes: prevState.notes.filter(note => note.id !== id)\n        }))\n    }\n\n    eachNote(note, i) {\n        return (\n            <Note key={note.id}\n                  index={note.id}\n                  onChange={this.update}\n                  onRemove={this.remove}>\n                {note.note}\n            </Note>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"board\">\n                {this.state.notes.map(this.eachNote)}\n                <button onClick={this.add.bind(null, \"New Note\")}\n                        id=\"add\" title=\"add a new note\"><span>Add</span> <FaPlus />\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Board\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Board from './Board'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Board  />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}